import random

from aiogram import Bot, Dispatcher, F
from aiogram.filters import Command, CommandStart
from aiogram.types import Message

from config import TOKEN


BOT_TOKEN: str = TOKEN
ATTEMPTS = 5
CONSENTS = (
    'да',
    'давай',
    'сыграем',
    'игра',
    'играть',
    'хочу играть',
)
REJECTIONS = (
    'нет',
    'не',
    'не хочу',
    'не буду'
)

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# Что?
# Телеграм-бот, с которым можно играть в игру "Угадай число"

# Чтобы что?
# Чтобы можно было сыграть в простую игру с ботом

# Что бот должен уметь?
# Сравнивать ответы пользователя с загаданным числом


user = {
    "in_game": False,  # Хранить состояние ("в игре", "не в игре")
    "secret_number": None,  # Генерировать случайное число от 1 до 100
    "attempts": None,  # Считать количество попыток, оставшихся у пользователя
    "total_games": 0,  # Бот может показывать статистику игр пользователя по запросу
    "wins": 0,
}


# Описание взаимодействия с ботом
# Пользователь отправляет команду /start боту (или стартует его, найдя в поиске)
# Бот приветствует пользователя и предлагает сыграть в игру "Угадай число", также предлагает пользователю прочитать подробные правила, отправив команду /help
@dp.message(CommandStart())
async def process_start_command(message: Message):
    await message.answer(
        """
Привет!
Давайте сыграем в игру "Угадай число"?

Чтобы получить правила игры и список доступных команд - отправьте команду /help
        """
    )
# На этом этапе пользователь может совершить 5 действий:



# Отправить в чат команду /help
# Пользователь отправляет в чат команду /help:
@dp.message(Command(commands='help'))
async def process_help_command(message: Message):
    # Бот присылает пользователю правила игры и описание команд
    await message.answer(
        f"""
Правила игры:

Я загадываю число от 1 до 100, а вам нужно его угадать
У вас есть {ATTEMPTS} попыток

Доступные команды:
/help - правила игры и список команд
/cancel - выйти из игры
/stat - посмотреть статистику

Давай сыграем?
        """
    )


# Отправить в чат команду /stat
# Пользователь отправляет в чат команду /stat:
@dp.message(Command(commands='stat'))
async def process_stat_command(message: Message):
    # Бот присылает пользователю статистику по играм (сколько всего было игр и в скольких из них пользователь выиграл)
    await message.answer(
        f'Всего игр сыграно: {user["total_games"]}\n'
        f'Игр выиграно: {user["wins"]}'
    )
    # Бот присылает пользователю сообщение с предложением сыграть


# Отправить в чат любое другое сообщение
# Пользователь отправляет в чат согласие играть в игру:
# Бот сообщает пользователю, что очень рад поиграть и сохраняет рандомное число от 1 до 100
def get_random_number() -> int:
    return random.randint(1, 100)


# Бот сохраняет информацию о том, что пользователь находится в состоянии "Игра"
# Бот устанавливает счетчик попыток пользователя в значение по умолчанию
# Пользователь на этом этапе может совершить 3 действия:
# Прислать в чат число от 1 до 100
# Прислать в чат команду /cancel
# Пользователь присылает в чат команду /cancel:
@dp.message(Command(commands='cancel'))
async def process_cancel_command(message: Message):
    if user['in_game']:
        # Бот переводит состояние из "Игра" в "Не игра"
        user['in_game'] = False
        # Бот отправляет в чат сообщение о том, что игра закончилась
        # Бот отправляет в чат сообщение о том, что если пользователь захочет снова сыграть, то пусть отправит сообщение "Игра" или "Сыграть", или "Давай сыграем" и т.п.
        await message.answer(
            'Вы вышли из игры. Если захотите сыграть '
            'снова - напишите об этом'
        )
    else:
        await message.answer(
            'А мы и так с вами не играем. '
            'Может, сыграем разок?'
        )


# Согласиться поиграть с ботом в игру, отправив в чат "Да" или "Давай", или "Сыграем" и т.п.
@dp.message(F.text.lower().in_(CONSENTS))
async def process_positive_answer(message: Message):
    if not user['in_game']:
        user['in_game'] = True
        user['secret_number'] = get_random_number()
        user['attempts'] = ATTEMPTS
        await message.answer(
            'Вот!\n\nЯ загадал число от 1 до 100, '
            'попробуй угадать!'
        )
    else:
        await message.answer(
            'Пока мы играем в игру я могу '
            'реагировать только на числа от 1 до 100 '
            'и команды /cancel и /stat'
        )


# Не согласиться играть, отправив в чат "Нет" или "Не хочу", или "В другой раз" и т.п.
@dp.message(F.text.lower().in_(REJECTIONS))
async def process_negative_answer(message: Message):
    if not user['in_game']:
        await message.answer(
            'Жаль :(\n\nЕсли захотите поиграть - просто '
            'напишите об этом'
        )
    else:
        await message.answer(
            'Ну нет,мы уже сейчас играем. Присылайте, '
            'пожалуйста, числа от 1 до 100'
        )


# Прислать что-то отличное от этих 2-х пунктов
# Пользователь присылает в чат число от 1 до 100:
@dp.message(lambda x: x.text and x.text.isdigit() and 1 <= int(x.text) <= 100)
async def process_numbers_answer(message: Message):
    if message.text:
        assumption = int(message.text)
    if user['in_game']:
        # Бот сравнивает число, присланное пользователем, с загаданным
        if assumption == user['secret_number']:
            # Если числа совпадают:
            # Бот переводит состояние из "Игра" в "Не игра"
            user['in_game'] = False
            # Бот увеличивает счетчик игр пользователя на 1
            user['total_games'] += 1
            # Бот увеличивает счетчик побед пользователя на 1
            user['wins'] += 1
            # Бот поздравляет пользователя с победой
            # Бот присылает пользователю сообщение с предложением сыграть еще раз
            await message.answer(
                'Ура!!! Вы угадали число!\n\n'
                'Может, сыграем еще?'
            )
        # Если число пользователя больше загаданного:
        elif assumption > user['secret_number']:
            # Бот уменьшает количество попыток пользователя на одну
            user['attempts'] -= 1
            # Бот сообщает пользователю, что загаданное число меньше
            await message.answer('Мое число меньше')
        # Если число пользователя меньше загаданного:
        elif assumption < user['secret_number']:
            # Бот уменьшает количество попыток пользователя на одну
            user['attempts'] -= 1
            # Бот сообщает пользователю, что загаданное число больше
            await message.answer('Мое число больше')

        if user['attempts'] == 0:
            user['in_game'] = False
            user['total_games'] += 1
            await message.answer(
                f'К сожалению, у вас больше не осталось '
                f'попыток. Вы проиграли :(\n\nМое число '
                f'было {user["secret_number"]}\n\nДавайте '
                f'сыграем еще?'
            )
    else:
        await message.answer('Мы еще не играем. Хотите сыграть?')

# Пользователь в состоянии "Игра" присылает в чат что-то отличное от числа от 1 до 100 или команды /cancel:
# Бот отправляет пользователю сообщение о том, что по правилам игры пользователь может присылать в чат только числа от 1 до 100 или команду /cancel
# Если у пользователя заканчивается количество попыток:
# Бот сообщает пользователю, что тот проиграл
# Бот сообщает пользователю, что загаданное число было таким-то
# Бот меняет состояние "Игра" на "Не игра"
# Бот увеличивает счетчик игр пользователя на 1
# Бот оправляет пользователю сообщение с предложением сыграть еще раз
# Пользователь отправляет в чат отказ играть в игру:
# Бот отправляет пользователю сообщение, типа, "Жаль :(" и инструкцию что нужно сделать пользователю, если он все-таки захочет поиграть


# Пользователь отправляет в чат любое другое сообщение:
# Бот сообщает, что не понимает пользователя и снова предлагает сыграть в игру
@dp.message()
async def process_other_answers(message: Message):
    if user['in_game']:
        await message.answer(
            'Мы же сейчас с вами играем. '
            'Присылайте, пожалуйста, числа от 1 до 100'
        )
    else:
        await message.answer(
            'Я довольно ограниченный бот, давайте '
            'просто сыграем в игру?'
        )


if __name__ == '__main__':
    dp.run_polling(bot)